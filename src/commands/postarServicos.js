const { EmbedBuilder, PermissionsBitField } = require("discord.js");
const { CANAIS_SERVICOS, CARGO_ADMIN_PRINCIPAL } = require("../../config");

async function limparMensagensGuild(client, guild) {
    console.log(`üßπ Limpando mensagens antigas no servidor: ${guild.name}`);
    try {
        const channels = guild.channels.cache.filter(c => c.isTextBased() && !c.isThread());
        let totalDeleted = 0;

        for (const [channelId, channel] of channels) {
            try {
                // Verifica se o bot tem permiss√£o para ler o hist√≥rico de mensagens
                if (!channel.permissionsFor(guild.members.me)?.has(PermissionsBitField.Flags.ReadMessageHistory)) {
                    console.log(`‚ö†Ô∏è Bot sem permiss√£o de leitura em ${channel.name}. Ignorando limpeza.`);
                    continue;
                }

                const messages = await channel.messages.fetch({ limit: 50 });
                const botMessages = messages.filter(msg => 
                    msg.author.id === client.user.id && 
                    client.mensagensOficiais.has(msg.id) && // Apenas mensagens oficiais do bot
                    msg.createdTimestamp < Date.now() - 30000 // Mensagens com mais de 30 segundos
                );

                for (const [msgId, message] of botMessages) {
                    try {
                        await message.delete();
                        client.mensagensOficiais.delete(msg.id); // Remove do controle de mensagens oficiais
                        totalDeleted++;
                        await new Promise(resolve => setTimeout(resolve, 500));
                    } catch (error) {
                        console.error(`‚ùå Erro ao deletar mensagem ${msg.id} em ${channel.name}:`, error.message);
                    }
                }
            } catch (error) {
                console.error(`‚ùå Erro ao buscar mensagens no canal ${channel.name}:`, error.message);
            }
        }
        console.log(`‚úÖ ${totalDeleted} mensagens oficiais antigas removidas de ${guild.name}`);
    } catch (error) {
        console.error("‚ùå Erro geral na limpeza de mensagens:", error);
    }
}

async function postarServicosAutomatico(client, guild) {
    console.log(`üì¢ Postando servi√ßos em: ${guild.name}`);

    const embed = new EmbedBuilder()
        .setTitle("üéÆ SERVI√áOS GAMING v2.2 (Orpheus/Evellyn)")
        .setDescription(
            "**‚ùó N√ÉO USO HACK - CHEATS! ‚ùó**\n\n" +
            "üõí **Sistema Profissional com Controle Total:**\n" +
            "‚Ä¢ Clique em üõí para abrir sua loja privada\n" +
            "‚Ä¢ Uma thread por cliente (sem duplicatas)\n" +
            "‚Ä¢ Numera√ß√£o sequencial autom√°tica\n" +
            "‚Ä¢ Sistema de quantidade inteligente\n" +
            "‚Ä¢ Controle administrativo Hellza\n\n" +

            "**üéØ PRINCIPAIS SERVI√áOS:**\n" +
            "‚≠ê Miss√£o Principal COMPLETA - **R$ 90,00**\n" +
            "üë• TODAS Hist√≥rias de Agentes - **R$ 76,00**\n" +
            "üìÜ Farm Mensal - **R$ 62,00**\n" +
            "üéâ Todos os Eventos v2.2 - **R$ 22,00**\n" +
            "‚öîÔ∏è Investida Mortal - **R$ 14,00**\n" +
            "üî¥ N√≥dulo Vermelho - **R$ 12,00**\n\n" +

            "**üí° Diferenciais Exclusivos:**\n" +
            "‚úÖ Atendimento privado numerado\n" +
            "‚úÖ Controle anti-duplica√ß√£o\n" +
            "‚úÖ Sistema Hellza de finaliza√ß√£o\n" +
            "‚úÖ Organiza√ß√£o total dos pedidos\n" +
            "‚úÖ Pagamento PIX seguro e r√°pido\n\n" +

            "**üö® IMPORTANTE:**\n" +
            "‚Ä¢ Apenas 1 thread ativa por cliente\n" +
            "‚Ä¢ Reaja apenas nas mensagens oficiais\n" +
            "‚Ä¢ Aguarde finaliza√ß√£o antes de novo pedido\n\n" +

            "**üöÄ CLIQUE EM üõí PARA COME√áAR SEU ATENDIMENTO!**"
        )
        .setColor(0x00AE86)
        .setFooter({ 
            text: "Sistema Anti-Duplica√ß√£o v2.2 ‚Ä¢ Controle Hellza ‚Ä¢ Mensagem Fixada",
            iconURL: guild.iconURL()
        })
        .setTimestamp();

    for (const nomeCanal of CANAIS_SERVICOS) {
        const canal = guild.channels.cache.find(c => 
            c.name.toLowerCase().includes(nomeCanal.toLowerCase()) && 
            c.isTextBased() && 
            !c.isThread()
        );

        if (canal) {
            try {
                // Limpa mensagens antigas do bot no canal antes de postar a nova
                await limparMensagensGuild(client, guild); // Chama a fun√ß√£o de limpeza

                const mensagem = await canal.send({ embeds: [embed] });
                await mensagem.react("üõí");

                // FIXA A MENSAGEM AUTOMATICAMENTE
                try {
                    await mensagem.pin();
                    console.log(`üìå Mensagem fixada em: ${canal.name}`);
                } catch (pinError) {
                    console.error(`‚ùå Erro ao fixar mensagem em ${canal.name}:`, pinError.message);
                }

                // REGISTRA COMO MENSAGEM OFICIAL
                client.mensagensOficiais.add(mensagem.id);
                console.log(`‚úÖ Mensagem oficial registrada: ${mensagem.id} em ${canal.name}`);

                await new Promise(resolve => setTimeout(resolve, 2000));
            } catch (error) {
                console.error(`‚ùå Erro ao postar em ${canal.name}:`, error.message);
            }
        } else {
            console.log(`‚ö†Ô∏è Canal '${nomeCanal}' n√£o encontrado em ${guild.name}`);
        }
    }
}

module.exports = { postarServicosAutomatico };
